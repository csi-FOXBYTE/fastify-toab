import {Command,Argument}from'commander';import m from'handlebars';import'tiny-glob';m.compile(`
import { createWorker, QueueContainer, WorkerContainer, Job } from "..";

const {{lname}}Worker = createWorker()
    .queue("{{lname}}-queue")
    .job<Job<{}, {}>>()
    .connection({})
    .processor(async () => {
        return {};
    });

/*
AUTOGENERATED!
*/

export { {{lname}}Worker };
export type {{cname}}Worker = (typeof {{lname}}Worker)["worker"];
export type {{cname}}WorkerQueue = (typeof {{lname}}Worker)["queue"];

export function get{{cname}}Worker(deps: WorkerContainer) {
    return deps.get<{{cname}}Worker>({{lname}}Worker.queueName);
}
export function get{{cname}}WorkerQueue(deps: QueueContainer) {
    return deps.get<{{cname}}WorkerQueue>({{lname}}Worker.queueName);
}
`);var i=m.compile(`
import { createController } from "..";

const {{lname}}Controller = createController()
    .rootPath("/{{lname}}")

/*
AUTOGENERATED!
*/

export { {{lname}}Controller };
`);m.compile(`
import {
  createService,
  InferService,
  ServiceContainer,
} from "..";

const {{lname}}Service = createService("{{lname}}", async () => {
    // Your code here...
});

export { {{lname}}Service };
export type {{cname}}Service = InferService<typeof {{lname}}Service>;
export function get{{cname}}Service(deps: ServiceContainer) {
    return deps.get<{{cname}}Service>({{lname}}Service.name);
}
`);function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}function s(e){return e.charAt(0).toLowerCase()+e.slice(1)}var l=new Command;l.name("fastify-toa").description("CLI to create services, workers and controllers easily.").version("0.0.1");l.command("create").description("create a component").addArgument(new Argument("<component>","component to create").choices(["service","controller","worker"])).addArgument(new Argument("<nameOrParent>","component name or worker parent")).addArgument(new Argument("<workerName>","worker name").argOptional()).action(async(e,o,p)=>{let n="";switch(e){case "controller":{let r=a(o),t=s(o);n=i({cname:r,lname:t});break}case "service":{let r=a(o),t=s(o);n=i({cname:r,lname:t});break}case "worker":{let r=a(p),t=s(p);n=i({cname:r,lname:t});break}}console.log(n);});l.parse();//# sourceMappingURL=generate.js.map
//# sourceMappingURL=generate.js.map