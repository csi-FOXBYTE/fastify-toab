{"version":3,"sources":["../src/generate.ts"],"names":["Handlebars","program","Command","Argument","Option","component","nameOrParent","workerName","wd"],"mappings":"6HAOEA,CAAAA,CAAW,OAAA,CAAQ,CAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAwBpB,CAAA,CAGCA,CAAAA,CAAW,OAAA,CAAQ,CAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,CAUpB,CAAA,CAEuBA,CAAAA,CAAW,OAAA,CAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAgB1C,EA6FD,IAAMC,CAAAA,CAAU,IAAIC,OAAAA,CAEpBD,CAAAA,CACG,KAAK,aAAa,CAAA,CAClB,WAAA,CAAY,yDAAyD,CAAA,CACrE,OAAA,CAAQ,OAAO,CAAA,CAElBA,EACG,OAAA,CAAQ,QAAQ,CAAA,CAChB,WAAA,CAAY,oBAAoB,CAAA,CAChC,WAAA,CACC,IAAIE,SAAS,aAAA,CAAe,qBAAqB,CAAA,CAAE,OAAA,CAAQ,CACzD,SAAA,CACA,YAAA,CACA,QACF,CAAC,CACH,CAAA,CACC,WAAA,CACC,IAAIA,QAAAA,CAAS,gBAAA,CAAkB,iCAAiC,CAClE,CAAA,CACC,WAAA,CAAY,IAAIA,QAAAA,CAAS,cAAA,CAAgB,aAAa,CAAA,CAAE,WAAA,EAAa,CAAA,CACrE,SAAA,CACC,IAAIC,MAAAA,CACF,sBAAA,CACA,0CACF,CACF,CAAA,CACC,OAAO,MAAOC,CAAAA,CAAWC,CAAAA,CAAcC,CAAAA,CAAYC,CAAAA,GAAO,CACzD,MAAA,OAAA,CAAQ,GAAA,CAAI,CAAC,EAAA,CAAAA,CAAE,CAAC,CAAA,CACV,IAAI,KAAA,CA+CZ,CAAC,CAAA,CAEHP,EAAQ,KAAA,EAAM","file":"generate.js","sourcesContent":["import { Argument, Command, Option } from \"commander\";\r\nimport { writeFile, mkdir } from \"fs/promises\";\r\nimport Handlebars from \"handlebars\";\r\nimport path from \"path\";\r\nimport glob from \"tiny-glob\";\r\n\r\nconst WorkerTemplate =\r\n  Handlebars.compile(`import { createWorker, QueueContainer, WorkerContainer, Job } from \"..\";\r\n\r\nconst {{lname}}Worker = createWorker()\r\n    .queue(\"{{lname}}-queue\")\r\n    .job<Job<{}, {}>>()\r\n    .connection({})\r\n    .processor(async () => {\r\n        return {};\r\n    });\r\n\r\n/*\r\nAUTOGENERATED!\r\n*/\r\n\r\nexport { {{lname}}Worker };\r\nexport type {{cname}}Worker = (typeof {{lname}}Worker)[\"worker\"];\r\nexport type {{cname}}WorkerQueue = (typeof {{lname}}Worker)[\"queue\"];\r\n\r\nexport function get{{cname}}Worker(deps: WorkerContainer) {\r\n    return deps.get<{{cname}}Worker>({{lname}}Worker.queueName);\r\n}\r\nexport function get{{cname}}WorkerQueue(deps: QueueContainer) {\r\n    return deps.get<{{cname}}WorkerQueue>({{lname}}Worker.queueName);\r\n}\r\n`);\r\n\r\nconst ControllerTemplate =\r\n  Handlebars.compile(`import { createController } from \"..\";\r\n\r\nconst {{lname}}Controller = createController()\r\n    .rootPath(\"/{{lname}}\")\r\n\r\n/*\r\nAUTOGENERATED!\r\n*/\r\n\r\nexport { {{lname}}Controller };\r\n`);\r\n\r\nconst ServiceTemplate = Handlebars.compile(`\r\nimport {\r\n  createService,\r\n  InferService,\r\n  ServiceContainer,\r\n} from \"..\";\r\n\r\nconst {{lname}}Service = createService(\"{{lname}}\", async () => {\r\n    // Your code here...\r\n});\r\n\r\nexport { {{lname}}Service };\r\nexport type {{cname}}Service = InferService<typeof {{lname}}Service>;\r\nexport function get{{cname}}Service(deps: ServiceContainer) {\r\n    return deps.get<{{cname}}Service>({{lname}}Service.name);\r\n}\r\n`);\r\n\r\nasync function createRegistries(workdir: string) {\r\n  const services = await glob(\"**/*.service.ts\", { cwd: workdir });\r\n  const controllers = await glob(\"**/*.controller.ts\", { cwd: workdir });\r\n  const workers = await glob(\"**/*.worker.ts\", { cwd: workdir });\r\n\r\n  let generated = `/*\r\nAUTOGENERATED!\r\n*/\r\n\r\nimport {\r\n  ControllerRegistry,\r\n  ServiceRegistry,\r\n  WorkerRegistry,\r\n} from \"../src/index\";\r\n\r\n`;\r\n\r\n  function mapImport({ name, path }: { name: string; path: string }) {\r\n    return `import { ${name} } from \"./${path\r\n      .split(\".\")\r\n      .slice(0, -1)\r\n      .join(\".\")\r\n      .split(\"\\\\\")\r\n      .join(\"/\")}\";`;\r\n  }\r\n\r\n  function mapNameAndPath(\r\n    path: string,\r\n    component: \"Service\" | \"Worker\" | \"Controller\"\r\n  ) {\r\n    const name = path.split(\".\").slice(-3)[0].split(\"\\\\\").slice(-1) + component;\r\n\r\n    return {\r\n      name,\r\n      path,\r\n    };\r\n  }\r\n\r\n  const servicesNameAndPath = services.map((path) =>\r\n    mapNameAndPath(path, \"Service\")\r\n  );\r\n  const workersNameAndPath = workers.map((path) =>\r\n    mapNameAndPath(path, \"Worker\")\r\n  );\r\n  const controllersNameAndPath = controllers.map((path) =>\r\n    mapNameAndPath(path, \"Controller\")\r\n  );\r\n\r\n  generated += servicesNameAndPath\r\n    .map(mapImport)\r\n    .concat(workersNameAndPath.map(mapImport))\r\n    .concat(controllersNameAndPath.map(mapImport))\r\n    .join(\"\\n\");\r\n\r\n  generated += \"\\n\";\r\n\r\n  generated += `\r\nexport async function getRegistries() {\r\n  let workerRegistryRef: { current: WorkerRegistry | null } = {\r\n    current: null,\r\n  };\r\n\r\n  const serviceRegistry = new ServiceRegistry(workerRegistryRef);\r\n${servicesNameAndPath\r\n  .map(({ name }) => `  serviceRegistry.register(${name});`)\r\n  .join(\"\\n\")}\r\n\r\n  const workerRegistry = new WorkerRegistry(serviceRegistry);\r\n${workersNameAndPath\r\n  .map(({ name }) => `  await workerRegistry.register(${name});`)\r\n  .join(\"\\n\")}\r\n\r\n  const controllerRegistry = new ControllerRegistry(serviceRegistry);\r\n${controllersNameAndPath\r\n  .map(({ name }) => `  controllerRegistry.register(${name});`)\r\n  .join(\"\\n\")}\r\n\r\n  return { controllerRegistry, serviceRegistry, workerRegistry };\r\n}`;\r\n\r\n  return generated;\r\n}\r\n\r\nfunction capitalize(word: string) {\r\n  return word.charAt(0).toUpperCase() + word.slice(1);\r\n}\r\n\r\nfunction uncapitalize(word: string) {\r\n  return word.charAt(0).toLowerCase() + word.slice(1);\r\n}\r\n\r\nconst program = new Command();\r\n\r\nprogram\r\n  .name(\"fastify-toa\")\r\n  .description(\"CLI to create services, workers and controllers easily.\")\r\n  .version(\"0.0.1\");\r\n\r\nprogram\r\n  .command(\"create\")\r\n  .description(\"create a component\")\r\n  .addArgument(\r\n    new Argument(\"<component>\", \"component to create\").choices([\r\n      \"service\",\r\n      \"controller\",\r\n      \"worker\",\r\n    ])\r\n  )\r\n  .addArgument(\r\n    new Argument(\"<nameOrParent>\", \"component name or worker parent\")\r\n  )\r\n  .addArgument(new Argument(\"<workerName>\", \"worker name\").argOptional())\r\n  .addOption(\r\n    new Option(\r\n      \"-w, --workdir <path>\",\r\n      \"workdir to operate in is src at default.\"\r\n    )\r\n  )\r\n  .action(async (component, nameOrParent, workerName, wd) => {\r\n    console.log({wd})\r\n    throw new Error();\r\n\r\n    if (component === \"worker\" && !workerName)\r\n      throw new Error(\"No workerName for worker supplied!\");\r\n    const workdir = path.join(process.cwd(), \"src\");\r\n\r\n    await mkdir(path.join(workdir, nameOrParent), { recursive: true });\r\n\r\n    switch (component) {\r\n      case \"controller\": {\r\n        const cname = capitalize(nameOrParent);\r\n        const lname = uncapitalize(nameOrParent);\r\n        const template = ControllerTemplate({ cname, lname });\r\n        await writeFile(\r\n          path.join(workdir, nameOrParent, `${lname}.controller.ts`),\r\n          template\r\n        );\r\n        break;\r\n      }\r\n      case \"service\": {\r\n        const cname = capitalize(nameOrParent);\r\n        const lname = uncapitalize(nameOrParent);\r\n        const template = ServiceTemplate({ cname, lname });\r\n        await writeFile(\r\n          path.join(workdir, nameOrParent, `${lname}.service.ts`),\r\n          template\r\n        );\r\n        break;\r\n      }\r\n      case \"worker\": {\r\n        const cname = capitalize(workerName);\r\n        const lname = uncapitalize(workerName);\r\n        await mkdir(path.join(workdir, nameOrParent, \"workers\"), {\r\n          recursive: true,\r\n        });\r\n        const template = WorkerTemplate({ cname, lname });\r\n        await writeFile(\r\n          path.join(workdir, nameOrParent, \"workers\", `${lname}.worker.ts`),\r\n          template\r\n        );\r\n        break;\r\n      }\r\n    }\r\n\r\n    const registries = await createRegistries(workdir);\r\n\r\n    await writeFile(path.join(workdir, \"registries.ts\"), registries);\r\n  });\r\n\r\nprogram.parse();\r\n"]}